apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply plugin: 'war'

buildscript {
    ext {
        jodconverterVersion = '4.2.3-alpha.1'
        springBootVersion = '2.1.2.RELEASE'
        springCoreVersion = '5.1.4.RELEASE'
        swaggerVersion = '2.9.2'

        junitVersion = '5.3.2'
        mockitoVersion = '2.24.0'
        tikaVersion = '1.20'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

group = 'de.kontextwork'
version = '0.0.2-SNAPSHOT'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

// ********************** Profile and properties for the JVM handling *************************
def prodProfiles='prod'
def devProfiles='dev'
def testProfiles='test'
def propertyDrivenProfiles;

// this can be used when starin gradle using -Pdev .. -Pprod
// we optionally also load a gradle file for each env, if it exists
if (project.hasProperty('prod')) {
    // Used for production environment
    propertyDrivenProfiles = prodProfiles
    def f = new File ('gradle/profile_prod.gradle')
    if ( f.exists() ) {
        apply from: rootProject.file('gradle/profile_prod.gradle');
    }

} else if (project.hasProperty('dev')) {
    // Used for local development
    propertyDrivenProfiles = devProfiles
    def f = new File ('gradle/profile_dev.gradle')
    if ( f.exists() ) {
        apply from: rootProject.file('gradle/profile_dev.gradle');
    }

} else {
    // Default when no profile property is specified, used for testing
    propertyDrivenProfiles = testProfiles
    def f = new File ('gradle/profile_test.gradle')
    if ( f.exists() ) {
        apply from: rootProject.file('gradle/profile_test.gradle');
    }
}
// ********************** Profile and properties for the JVM handling *************************

// // ********************** Spring boot overrides for better profile / debug handling OOTB // ********************** Profile and properties for the JVM handling *************************
bootRun {
    // apply the profile we selected for gradle as a spring boot profile
    systemProperties = [
            'spring.profiles.active': propertyDrivenProfiles
    ]

    // on all profiles non being production, expose a debug port by default
    // this is not needed for IJ, if you start a gradle task using the debug button, it will work regardless
    def remoteDebugPort = '5001'
    if (!project.hasProperty('prod')) {
        bootRun.jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=" + remoteDebugPort]
    }

    // Use -Pproperty.name=value in addition to a -P profile argument
    // for each property below to pass database connection properties.
    //
    // These will only be used if profile specific property files
    // do not override them.
    // They are intended for use with the "prod" profile.
    ext.applyPropertyIfExists = { propertyKey ->;
        if(project.hasProperty(propertyKey)) {
            systemProperties[propertyKey] = project.getProperty(propertyKey)
        }
    }
    applyPropertyIfExists('spring.datasource.url')
    applyPropertyIfExists('spring.datasource.username')
    applyPropertyIfExists('spring.datasource.password')
}

dependencies {
    compile "io.github.keyintegrity:jodconverter-local:$jodconverterVersion"
    compile "io.github.keyintegrity:jodconverter-spring-boot-starter:$jodconverterVersion"
    compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    compileOnly 'org.projectlombok:lombok'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    compile "org.springframework:spring-core:$springCoreVersion"
    // needed when compiling against > Java 8 since jaxb is no longer included
    // you would get Error creating bean with name 'xmlModelPlugin': Lookup method resolution failed
    compile 'org.glassfish.jaxb:jaxb-runtime:2.3.2'

    compile("org.springframework.boot:spring-boot-devtools")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testCompile "org.apache.tika:tika-parsers:${tikaVersion}"

    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testCompile("org.mockito:mockito-core:${mockitoVersion}")
    testCompile("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    compile "io.springfox:springfox-swagger2:${swaggerVersion}"
    compile "io.springfox:springfox-swagger-ui:${swaggerVersion}"
}
